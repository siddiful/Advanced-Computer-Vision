# -*- coding: utf-8 -*-
"""Style transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fZknBMAaVpmOJWeV2E9sszxsUQVPcZfg
"""

from keras.models import Model
from keras.layers import Input, Conv2D, MaxPooling2D, AveragePooling2D
from keras.applications.vgg16 import VGG16, preprocess_input
import keras.utils as image
import numpy as np
import matplotlib.pyplot as plt
import keras.backend as K
from scipy.optimize import fmin_l_bfgs_b

import tensorflow as tf
if tf.__version__.startswith('2'):
  tf.compat.v1.disable_eager_execution()

def AvgpoolVGG(shape):
  vgg = VGG16(include_top=False, weights="imagenet", input_shape=shape)
  i = vgg.input
  x = i
  for layer in vgg.layers:
    if layer.__class__ == MaxPooling2D:
      x = AveragePooling2D()(x)
    else:
      x = layer(x)
  return Model(i, x)

def AvgpoolVGGcutoff(shape, num_conv):
  model = AvgpoolVGG(shape)
  output = None
  cnt = 0
  for layer in model.layers:
    if layer.__class__ == Conv2D:
      cnt += 1
    if cnt >= num_conv:
      output = layer.output
      break
  return Model(model.input, output)

def unpreprocess(img):
  img[..., 0] += 103.939
  img[..., 1] += 116.779
  img[..., 2] += 126.68
  img = img[...,::-1]
  return img

def scale_img(x):
  x = x - x.min()
  x = x / x.max()
  return x

if __name__ == "__main__":
  path = 'content.jpg'
  img = image.load_img(path)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  batch_shape = x.shape
  shape = batch_shape[1:]
  x = preprocess_input(x)

  #plt.imshow(img)
  #plt.show()

  content_model = AvgpoolVGGcutoff(shape, 11)

  target = K.variable(content_model.predict(x))
  loss = K.mean(K.square(target - content_model.output))
  grads = K.gradients(loss, content_model.input)

  get_loss_grads = K.function(inputs=[content_model.input], outputs=[loss]+grads)

  def get_loss_grads_wrap(vec):
    l, g = get_loss_grads([vec.reshape(*batch_shape)])
    return l.astype(np.float64), g.flatten().astype(np.float64)

  losses = []
  epoch = 10

  x = np.random.randn(np.prod(batch_shape))
  for i in range(epoch):
    x, l, _ = fmin_l_bfgs_b(func=get_loss_grads_wrap, x0=x, maxfun=10)
    x = np.clip(x, -127, 127)
    losses.append(l)

  plt.plot(losses)
  plt.show()

  final_img = x.reshape(*batch_shape)
  final_img = unpreprocess(final_img)
  plt.imshow(scale_img(final_img[0]))
  plt.show()