# -*- coding: utf-8 -*-
"""Style transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fZknBMAaVpmOJWeV2E9sszxsUQVPcZfg
"""

from keras.models import Model
from keras.layers import Input, Conv2D, MaxPooling2D, AveragePooling2D
from keras.applications.vgg16 import VGG16, preprocess_input
import keras.utils as image
import numpy as np
import matplotlib.pyplot as plt
import keras.backend as K
from scipy.optimize import fmin_l_bfgs_b
from content_transfer import AvgpoolVGG, unpreprocess, scale_img

import tensorflow as tf
if tf.__version__.startswith('2'):
  tf.compat.v1.disable_eager_execution()

def gram_matrix(img):
  F = K.batch_flatten(K.permute_dimensions(img, (2, 0, 1)))
  G = K.dot(F, K.transpose(F)) / img.get_shape().num_elements()
  return G

def style_loss(b, t):
  return K.mean(K.square(gram_matrix(b)-gram_matrix(t)))

def minimise(fun, epoch, batch_shape):
  losses = []
  x = np.random.randn(np.prod(batch_shape))
  for i in range(epoch):
    x, l, _ = fmin_l_bfgs_b(func=fun, x0=x, maxfun=20)
    x = np.clip(x, -127, 127)
    losses.append(l)

  plt.plot(losses)
  plt.show()

  new_img = x.reshape(*batch_shape)
  final_img = unpreprocess(new_img)
  return final_img[0]

if __name__ == '__main__':
  img = image.load_img('style.jpg')
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)

  batch_shape = x.shape
  shape = batch_shape[1:]

  vgg = AvgpoolVGG(shape)

  sym_conv_output = [layer.get_output_at(1) for layer in vgg.layers if layer.name.endswith('conv1')]
  style_model = Model(vgg.input, sym_conv_output)
  target_conv_output = [K.variable(y) for y in style_model.predict(x)]

  loss = 0
  for symbol, target in zip(sym_conv_output, target_conv_output):
    loss += style_loss(symbol[0], target[0])

  gradient = K.gradients(loss, style_model.input)

  get_loss_grads = K.function(inputs=[style_model.input], outputs=[loss]+gradient)

  def get_loss_grads_wrap(xvec):
    l, g = get_loss_grads([xvec.reshape(*batch_shape)])
    return l.astype(np.float64), g.flatten().astype(np.float64)

  final_img = minimise(get_loss_grads_wrap, 10, batch_shape)
  plt.imshow(scale_img(final_img))
  plt.show()